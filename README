CVS:$Id: README,v 1.2 2002/01/21 18:38:38 klindsay Exp $
CVS:$Name: vort_treecode_1_0 $

****************************************

Copyright (C) 2002  Keith Lindsay (klindsay@ucar.edu)

This file is the partial documentation for vort_treecode, a program
to compute the evolution of a three-dimensional vortex sheet using
an adaptive treecode to evaluate the velocity field.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

****************************************

The code is described in the following two references. If you publish
an article that relies on the code, please cite them.

Keith Lindsay, 'A Three-Dimensional Cartesian Tree-Code and
Applications to Vortex Sheet Roll-up', Ph.D. Dissertation, The
University of Michigan, 1997.

K. Lindsay and R. Krasny, 'A particle method and adaptive treecode for
vortex sheet motion in three-dimensional flow', Journal of
Computational Physics, Vol. 172, No. 2, 2001, pp. 879-907.

****************************************

The distribution tarfile comes with sourcecode and a makefile. If one
runs 'make all', three executables are generated : gendat, vel, and
prog.

The program gendat generates a vortex sheet data file that is read in
by vel and prog. This particular program generates the initial
condition of two obliquely oriented circular vortex sheets. They are
oriented such that they will collide as described in both references
above. gendat takes 5 command line arguments, which in order are :

del         delta used in Biot-Savart kernel smoothing
dt0         initial time-step
fil_cnt     number of filaments used to discretize each disk
ang         angle of inclination for each disk
outfile     name of vortex sheet data file to write initial conditions to


The program vel reads in a vortex sheet data file, computes the
instantaneous velocity field generated by the sheets described by the
file, and performs a Forward-Euler step with the generated velocity
field. vel takes 4 command line arguments, which in order are :

infile      name of input vortex sheet data file
tol         tolerance parameter for tree-code
node_min    tree cells with fewer particles than this are not split
outfile     name of vortex sheet data file to write evolved sheet to


The program prog reads in a vortex sheet data file and integrates the
dynamical equations forward in time. The time integration is done with
a 4th order Runge-Kutta integrator. prog takes 8 command line arguments,
which in order are :

infile      name of input vortex sheet data file
dtmin       minimum time step
eps_alpha   adaptive refinement parameter across filaments
eps_th      adaptive refinement parameter along filaments
stop_time   time to which integration is to proceed
tol         tolerance parameter for tree-code
node_min    tree cells with fewer particles than this are not split
outfile     name of vortex sheet data file to write evolved sheet to


The format of the vortex sheet data file is cursorily described in the
file io.c, which contains the code that reads and writes the data
files.

****************************************

There are a number of cpp macros defined throughout the code that
effect how the code operates.

macro               file       description
-----               ----       -----------
REAL                proj.h     specifies precision: float or double
DEBUG               proj.h     setting of debug level:
                                  NONE, STARTUP, or RUN_PRINT
ARRAY_BLOCK         proj.h     block size when allocating node
                                  on a vortex filament

MAX_P               tree.h     maximum order used in expansions
BOUND               tree.h     which error bound is to be used:
                                  POTENTIAL or VELOCITY

N_STAT              comp_f.c   print out total number of particles
                                  on sheet
ORD_CNT             comp_f.c   print stats on what order expansions
                                  are used
TREE_STATS          comp_f.c   print stats on shape of tree
MIN_NODE_CNT        comp_f.c   particle count below which direct
                                  summation is used

DT_STATS            main.c     print out value of dt used
DISK_STATS          main.c     print out stats on vortex sheets

C_OF_MASS_EXP_PT    tree.c     use center of mass as expansion point
                                  vs. geometric center
CELL_BLOCK_SIZE     tree.c     block size when allocating tree nodes
CELL_SPLIT_FACTOR   tree.c     factor determining which directions
                                  to subdivide box in
